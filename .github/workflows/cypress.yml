name: Cypress

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  cypress-run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v6
        with:
          node-version: 22
          cache: 'npm'
      - name: Install lockfile
        run: npm ci
      - name: Run Cypress Tests
        id: cypress
        run: npm run cy:ci
      - name: Debug - List Report Files
        if: always()
        run: |
          echo "Listing cypress/reports directory:"
          ls -laR cypress/reports/ || echo "cypress/reports directory not found"
          echo ""
          echo "Searching for JSON files:"
          find cypress -name "*.json" -type f || echo "No JSON files found"
      - name: Generate Test Summary
        if: always()
        uses: actions/github-script@v8
        with:
          # language=JavaScript
          script: |
            const fs = require('fs');
            
            // Parse Cypress mochawesome JSON output
            function parseCypressResults(jsonContent) {
              const data = JSON.parse(jsonContent);
              const stats = data.stats || {};
              
              return {
                suites: stats.suites || 0,
                tests: stats.tests || 0,
                passes: stats.passes || 0,
                failures: stats.failures || 0,
                pending: stats.pending || 0,
                skipped: stats.skipped || 0,
                other: stats.other || 0,
                passPercent: stats.passPercent || 0,
                pendingPercent: stats.pendingPercent || 0,
              };
            }
            
            let summary = '## üß™ Cypress Test Results\n\n';
            
            try {
              const jsonPath = 'cypress/reports/html/mochawesome.json';
              
              // Debug: Log what we're looking for and what exists
              console.log('Looking for JSON at:', jsonPath);
              console.log('File exists:', fs.existsSync(jsonPath));
              
              // Try to find JSON files in the reports directory
              const reportsDir = 'cypress/reports';
              if (fs.existsSync(reportsDir)) {
                console.log('Reports directory exists');
                const findJsonFiles = (dir) => {
                  const files = fs.readdirSync(dir, { withFileTypes: true });
                  for (const file of files) {
                    const fullPath = `${dir}/${file.name}`;
                    if (file.isDirectory()) {
                      findJsonFiles(fullPath);
                    } else if (file.name.endsWith('.json')) {
                      console.log('Found JSON file:', fullPath);
                    }
                  }
                };
                findJsonFiles(reportsDir);
              } else {
                console.log('Reports directory does not exist');
              }
              
              if (fs.existsSync(jsonPath)) {
                const jsonContent = fs.readFileSync(jsonPath, 'utf8');
                const results = parseCypressResults(jsonContent);
                
                if (results.tests > 0) {
                  const emoji = results.failures === 0 ? '‚úÖ' : '‚ö†Ô∏è';
                  
                  summary += `${emoji} **Test Suites:** ${results.suites} total\n\n`;
                  summary += `${emoji} **Tests:** ${results.failures} failed | ${results.passes} passed`;
                  if (results.pending > 0) {
                    summary += ` | ${results.pending} pending`;
                  }
                  if (results.skipped > 0) {
                    summary += ` | ${results.skipped} skipped`;
                  }
                  summary += ` (${results.tests})\n\n`;
                  
                  if (results.failures === 0) {
                    summary += 'üéâ All tests passed!\n\n';
                  } else {
                    const passRate = (results.passPercent || 0).toFixed(1);
                    summary += `üìä **Pass Rate:** ${passRate}%\n\n`;
                  }
                } else {
                  summary += '‚ö†Ô∏è No test results found in JSON output.\n\n';
                }
              } else {
                summary += '‚ö†Ô∏è Test results JSON not found.\n\n';
              }
            } catch (error) {
              summary += `‚ö†Ô∏è Error parsing test results: ${error.message}\n\n`;
              console.error('Error details:', error);
            }
            
            // Write summary to GitHub Step Summary
            await core.summary
              .addRaw(summary)
              .write();
            
            // Store summary for use in PR comment
            fs.writeFileSync('cypress-summary.md', summary);
      - name: Upload PR Report
        if: github.event_name == 'pull_request' && always()
        uses: actions/upload-artifact@v5
        with:
          name: cypress-reports-pr-${{ github.event.pull_request.number }}
          path: cypress/reports/html
          retention-days: 7
      - name: Upload Reports
        if: github.event_name != 'pull_request' && always()
        uses: actions/upload-artifact@v5
        with:
          name: cypress-reports-${{ github.ref_name }}-${{ github.run_number }}
          path: cypress/reports/html
          retention-days: 30
      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v8
        with:
          # language=JavaScript
          script: |
            const fs = require('fs');
            
            let summary = '';
            try {
              summary = fs.readFileSync('cypress-summary.md', 'utf8');
            } catch (error) {
              summary = '‚ö†Ô∏è Could not read test summary.';
            }
            
            const reportUrl = `https://${context.repo.owner}.github.io/${context.repo.repo}/reports/cypress-reports-pr-${context.issue.number}/`;
            summary += `\n\nüìä [View detailed HTML report](${reportUrl})`;
            
            // Add HTML comment marker for identification
            const body = `<!-- cypress-results-comment -->\n${summary}`;
            
            // Find existing comment (with pagination)
            const comments = await github.paginate(github.rest.issues.listComments, {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.find(comment => 
              comment.body.includes('<!-- cypress-results-comment -->')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  clean:
    needs: cypress-run
    if: always()
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Cleanup old artifacts
        if: github.event_name != 'pull_request'
        uses: actions/github-script@v8
        with:
          # language=JavaScript
          script: |
            const maxVersions = 3;
            const response = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            const artifacts = response.data.artifacts
              .filter(artifact => artifact.name.startsWith('cypress-reports-' + '${{ github.ref_name }}'));
            if (artifacts.length > maxVersions) {
              // Sort by created_at descending
              artifacts.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
              // Delete all but the latest maxVersions
              for (const artifact of artifacts.slice(maxVersions)) {
                console.log('Deleting artifact:', artifact.name);
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
              }
            }
