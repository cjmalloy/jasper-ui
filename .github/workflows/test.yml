name: Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  checks: write
  contents: read
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Build the Docker image
        run: docker build . -t ${{ github.repository }}:$(date +%s)

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Build the testing image
        run: docker build . --file Dockerfile --target test --tag test
      - name: Run the test container
        run: docker run --name test test
      - name: Copy test reports from container
        if: always()
        run: docker cp test:/report report
      - name: Upload PR Report
        if: github.event_name == 'pull_request' && always()
        uses: actions/upload-artifact@v4
        with:
          name: vitest-reports-pr-${{ github.event.pull_request.number }}
          path: report
          retention-days: 7
      - name: Upload Reports
        if: github.event_name != 'pull_request' && always()
        uses: actions/upload-artifact@v4
        with:
          name: vitest-reports-${{ github.ref_name }}-${{ github.run_number }}
          path: report
          retention-days: 30
      - name: Generate Test Summary
        if: always()
        uses: actions/github-script@v8
        with:
          # language=JavaScript
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Parse Vitest console output
            function parseVitestOutput(logContent) {
              let testFiles = 0;
              let testFilesFailed = 0;
              let testsTotal = 0;
              let testsFailed = 0;
              
              // Look for the summary line: "Test Files  X failed | Y passed (Z)"
              const testFilesMatch = logContent.match(/Test Files\s+(\d+)\s+failed\s+\|\s+(\d+)\s+passed\s+\((\d+)\)/);
              if (testFilesMatch) {
                testFilesFailed = parseInt(testFilesMatch[1]);
                const testFilesPassed = parseInt(testFilesMatch[2]);
                testFiles = parseInt(testFilesMatch[3]);
              }
              
              // Look for the tests summary line: "Tests  X failed | Y passed (Z)"
              const testsMatch = logContent.match(/Tests\s+(\d+)\s+failed\s+\|\s+(\d+)\s+passed\s+\((\d+)\)/);
              if (testsMatch) {
                testsFailed = parseInt(testsMatch[1]);
                const testsPassed = parseInt(testsMatch[2]);
                testsTotal = parseInt(testsMatch[3]);
              }
              
              return {
                testFiles,
                testFilesFailed,
                testsTotal,
                testsFailed
              };
            }
            
            let summary = '## üß™ Test Results\n\n';
            
            try {
              const logPath = 'report/test-output.log';
              if (fs.existsSync(logPath)) {
                const logContent = fs.readFileSync(logPath, 'utf8');
                const results = parseVitestOutput(logContent);
                
                if (results.testsTotal > 0) {
                  const testFilesPassed = results.testFiles - results.testFilesFailed;
                  const testsPassed = results.testsTotal - results.testsFailed;
                  const emoji = results.testsFailed === 0 ? '‚úÖ' : '‚ö†Ô∏è';
                  
                  summary += `${emoji} **Test Files:** ${results.testFilesFailed} failed | ${testFilesPassed} passed (${results.testFiles})\n\n`;
                  summary += `${emoji} **Tests:** ${results.testsFailed} failed | ${testsPassed} passed (${results.testsTotal})\n\n`;
                  
                  if (results.testsFailed === 0) {
                    summary += 'üéâ All tests passed!\n\n';
                  } else {
                    const passRate = ((testsPassed / results.testsTotal) * 100).toFixed(1);
                    summary += `üìä **Pass Rate:** ${passRate}%\n\n`;
                  }
                } else {
                  summary += '‚ö†Ô∏è No test results found in log output.\n\n';
                }
              } else {
                summary += '‚ö†Ô∏è Test output log not found.\n\n';
              }
            } catch (error) {
              summary += `‚ö†Ô∏è Error parsing test results: ${error.message}\n\n`;
            }
            
            // Write summary to GitHub Step Summary
            await core.summary
              .addRaw(summary)
              .write();
            
            // Store summary for use in PR comment
            fs.writeFileSync('test-summary.md', summary);
      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v8
        with:
          # language=JavaScript
          script: |
            const fs = require('fs');
            
            let summary = '';
            try {
              summary = fs.readFileSync('test-summary.md', 'utf8');
            } catch (error) {
              summary = '‚ö†Ô∏è Could not read test summary.';
            }
            
            const reportUrl = `https://${context.repo.owner}.github.io/${context.repo.repo}/reports/vitest-reports-pr-${context.issue.number}/`;
            summary += `\n\nüìä [View detailed HTML report](${reportUrl})`;
            
            // Add HTML comment marker for identification
            const body = `<!-- test-results-comment -->\n${summary}`;
            
            // Find existing comment (with pagination)
            const comments = await github.paginate(github.rest.issues.listComments, {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.find(comment => 
              comment.body.includes('<!-- test-results-comment -->')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  clean:
    needs: test
    if: always()
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Cleanup old artifacts
        if: github.event_name != 'pull_request'
        uses: actions/github-script@v8
        with:
          # language=JavaScript
          script: |
            const maxVersions = 3;
            const response = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            const artifacts = response.data.artifacts
              .filter(artifact => artifact.name.startsWith('vitest-reports-' + '${{ github.ref_name }}'));
            if (artifacts.length > maxVersions) {
              // Sort by created_at descending
              artifacts.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
              // Delete all but the latest maxVersions
              for (const artifact of artifacts.slice(maxVersions)) {
                console.log('Deleting artifact:', artifact.name);
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
              }
            }
