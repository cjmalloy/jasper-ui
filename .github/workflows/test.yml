name: Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ '**' ]

permissions:
  checks: write
  contents: read
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Build the Docker image
        run: docker build . -t ${{ github.repository }}:$(date +%s)

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Build the testing image
        run: docker build . --file Dockerfile --target test --tag test
      - name: Run the test container
        run: docker run --name test test
      - name: Copy the tests from the container
        if: always()
        run: docker cp test:/tests tests
      - name: Generate HTML Report
        if: always()
        run: |
          mkdir -p report
          cat > report/index.html <<'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="UTF-8">
              <title>Vitest Test Report</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: 20px;
                      background: #f5f5f5;
                  }
                  h1 {
                      color: #333;
                      border-bottom: 3px solid #4CAF50;
                      padding-bottom: 10px;
                  }
                  .summary {
                      background: white;
                      padding: 20px;
                      border-radius: 8px;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                      margin: 20px 0;
                  }
                  .stats {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                      gap: 15px;
                      margin: 20px 0;
                  }
                  .stat {
                      background: white;
                      padding: 15px;
                      border-radius: 8px;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                  }
                  .stat-label {
                      font-size: 14px;
                      color: #666;
                      margin-bottom: 5px;
                  }
                  .stat-value {
                      font-size: 32px;
                      font-weight: bold;
                  }
                  .passed { color: #4CAF50; }
                  .failed { color: #f44336; }
                  .duration { color: #2196F3; }
                  pre {
                      background: #f8f8f8;
                      padding: 15px;
                      border-radius: 4px;
                      overflow-x: auto;
                      white-space: pre-wrap;
                      word-wrap: break-word;
                  }
                  .log-section {
                      background: white;
                      padding: 20px;
                      border-radius: 8px;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                      margin: 20px 0;
                  }
              </style>
          </head>
          <body>
              <h1>🧪 Vitest Test Report</h1>
              <div class="summary">
                  <h2>Test Summary</h2>
                  <div class="stats">
          EOF
          
          # Parse test results from the log
          PASSED_FILES=$(grep -oP '\d+(?= passed)' tests/test-output.log | head -1 || echo "0")
          FAILED_FILES=$(grep -oP '\d+(?= failed)' tests/test-output.log | head -1 || echo "0")
          TOTAL_FILES=$(grep -oP 'Test Files.*\((\d+)\)' tests/test-output.log | grep -oP '\d+(?=\))' | head -1 || echo "0")
          PASSED_TESTS=$(grep -oP 'Tests.*\d+ failed \| (\d+) passed' tests/test-output.log | grep -oP '\d+ passed' | grep -oP '\d+' | head -1 || echo "0")
          FAILED_TESTS=$(grep -oP '(\d+) failed' tests/test-output.log | grep -oP '\d+' | head -1 || echo "0")
          TOTAL_TESTS=$(grep -oP 'Tests.*\((\d+)\)' tests/test-output.log | grep -oP '\d+(?=\))' | head -1 || echo "0")
          DURATION=$(grep -oP 'Duration\s+\K[\d.]+s' tests/test-output.log | tail -1 || echo "N/A")
          
          cat >> report/index.html <<EOF
                      <div class="stat">
                          <div class="stat-label">Total Test Files</div>
                          <div class="stat-value">$TOTAL_FILES</div>
                      </div>
                      <div class="stat">
                          <div class="stat-label">Passed Files</div>
                          <div class="stat-value passed">$PASSED_FILES</div>
                      </div>
                      <div class="stat">
                          <div class="stat-label">Failed Files</div>
                          <div class="stat-value failed">$FAILED_FILES</div>
                      </div>
                      <div class="stat">
                          <div class="stat-label">Total Tests</div>
                          <div class="stat-value">$TOTAL_TESTS</div>
                      </div>
                      <div class="stat">
                          <div class="stat-label">Passed Tests</div>
                          <div class="stat-value passed">$PASSED_TESTS</div>
                      </div>
                      <div class="stat">
                          <div class="stat-label">Failed Tests</div>
                          <div class="stat-value failed">$FAILED_TESTS</div>
                      </div>
                      <div class="stat">
                          <div class="stat-label">Duration</div>
                          <div class="stat-value duration">$DURATION</div>
                      </div>
                  </div>
              </div>
              <div class="log-section">
                  <h2>Test Output</h2>
                  <pre>
          EOF
          
          cat tests/test-output.log >> report/index.html
          
          cat >> report/index.html <<'EOF'
                  </pre>
              </div>
              <div class="summary">
                  <p><em>Generated on $(date)</em></p>
              </div>
          </body>
          </html>
          EOF
      - name: Publish Unit Test Results
        uses: dorny/test-reporter@v2.1.1
        if: always()
        continue-on-error: true
        with:
          name: Vitest Test Results
          path: "tests/*.xml"
          reporter: java-junit
      - name: Upload PR Report
        if: github.event_name == 'pull_request' && always()
        uses: actions/upload-artifact@v5
        with:
          name: vitest-reports-pr-${{ github.event.pull_request.number }}
          path: report
          retention-days: 7
      - name: Upload Reports
        if: github.event_name != 'pull_request' && always()
        uses: actions/upload-artifact@v5
        with:
          name: vitest-reports-${{ github.ref_name }}-${{ github.run_number }}
          path: report
          retention-days: 30
      - name: Generate Test Summary
        if: always()
        uses: actions/github-script@v8
        with:
          # language=JavaScript
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Parse JUnit XML files
            function parseJUnitXML(xmlContent) {
              const testsuites = [];
              const testsuitesMatch = xmlContent.matchAll(/<testsuite[^>]*>/g);
              
              for (const match of testsuitesMatch) {
                const suiteStr = match[0];
                const nameMatch = suiteStr.match(/name="([^"]*)"/);
                const testsMatch = suiteStr.match(/tests="(\d+)"/);
                const failuresMatch = suiteStr.match(/failures="(\d+)"/);
                const errorsMatch = suiteStr.match(/errors="(\d+)"/);
                const timeMatch = suiteStr.match(/time="([^"]*)"/);
                
                testsuites.push({
                  name: nameMatch ? nameMatch[1] : 'Unknown',
                  tests: testsMatch ? parseInt(testsMatch[1]) : 0,
                  failures: failuresMatch ? parseInt(failuresMatch[1]) : 0,
                  errors: errorsMatch ? parseInt(errorsMatch[1]) : 0,
                  time: timeMatch ? parseFloat(timeMatch[1]) : 0
                });
              }
              
              // Parse individual test cases that failed
              const failures = [];
              const testcaseRegex = /<testcase[^>]*>[\s\S]*?<\/testcase>/g;
              const testcases = xmlContent.matchAll(testcaseRegex);
              
              for (const tcMatch of testcases) {
                const tcStr = tcMatch[0];
                if (tcStr.includes('<failure') || tcStr.includes('<error')) {
                  const nameMatch = tcStr.match(/name="([^"]*)"/);
                  const classnameMatch = tcStr.match(/classname="([^"]*)"/);
                  const failureMatch = tcStr.match(/<failure[^>]*>([\s\S]*?)<\/failure>/);
                  const errorMatch = tcStr.match(/<error[^>]*>([\s\S]*?)<\/error>/);
                  
                  const message = failureMatch ? failureMatch[1] : (errorMatch ? errorMatch[1] : 'Unknown error');
                  
                  failures.push({
                    name: nameMatch ? nameMatch[1] : 'Unknown',
                    classname: classnameMatch ? classnameMatch[1] : 'Unknown',
                    message: message.trim().substring(0, 500) // Limit message length
                  });
                }
              }
              
              return { testsuites, failures };
            }
            
            let summary = '## 🧪 Test Results\n\n';
            let totalTests = 0;
            let totalFailures = 0;
            let totalErrors = 0;
            let allFailures = [];
            
            try {
              const testsDir = 'tests';
              if (fs.existsSync(testsDir)) {
                const files = fs.readdirSync(testsDir).filter(f => f.endsWith('.xml'));
                
                for (const file of files) {
                  const content = fs.readFileSync(path.join(testsDir, file), 'utf8');
                  const { testsuites, failures } = parseJUnitXML(content);
                  
                  for (const suite of testsuites) {
                    totalTests += suite.tests;
                    totalFailures += suite.failures;
                    totalErrors += suite.errors;
                  }
                  
                  allFailures.push(...failures);
                }
                
                const totalFailed = totalFailures + totalErrors;
                const emoji = totalFailed === 0 ? '✅' : '❌';
                
                summary += `${emoji} **Total:** ${totalTests} tests, ${totalFailed} failed\n\n`;
                
                if (totalFailed > 0) {
                  summary += '### Failed Tests\n\n';
                  for (const failure of allFailures.slice(0, 20)) { // Limit to first 20 failures
                    summary += `- **${failure.classname}** › ${failure.name}\n`;
                    summary += `  \`\`\`\n  ${failure.message}\n  \`\`\`\n\n`;
                  }
                  
                  if (allFailures.length > 20) {
                    summary += `\n_... and ${allFailures.length - 20} more failures_\n\n`;
                  }
                } else {
                  summary += '🎉 All tests passed!\n\n';
                }
              } else {
                summary += '⚠️ No test results found.\n';
              }
            } catch (error) {
              summary += `⚠️ Error parsing test results: ${error.message}\n`;
            }
            
            // Write summary to GitHub Step Summary
            await core.summary
              .addRaw(summary)
              .write();
            
            // Store summary for use in PR comment
            fs.writeFileSync('test-summary.md', summary);
      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v8
        with:
          # language=JavaScript
          script: |
            const fs = require('fs');
            
            let summary = '';
            try {
              summary = fs.readFileSync('test-summary.md', 'utf8');
            } catch (error) {
              summary = '⚠️ Could not read test summary.';
            }
            
            const reportUrl = `https://${context.repo.owner}.github.io/${context.repo.repo}/reports/vitest-reports-pr-${context.issue.number}/`;
            summary += `\n\n📊 [View detailed HTML report](${reportUrl})`;
            
            // Add HTML comment marker for identification
            const body = `<!-- test-results-comment -->\n${summary}`;
            
            // Find existing comment (with pagination)
            const comments = await github.paginate(github.rest.issues.listComments, {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.find(comment => 
              comment.body.includes('<!-- test-results-comment -->')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  clean:
    needs: test
    if: always()
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Cleanup old artifacts
        if: github.event_name != 'pull_request'
        uses: actions/github-script@v8
        with:
          # language=JavaScript
          script: |
            const maxVersions = 3;
            const response = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            const artifacts = response.data.artifacts
              .filter(artifact => artifact.name.startsWith('vitest-reports-' + '${{ github.ref_name }}'));
            if (artifacts.length > maxVersions) {
              // Sort by created_at descending
              artifacts.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
              // Delete all but the latest maxVersions
              for (const artifact of artifacts.slice(maxVersions)) {
                console.log('Deleting artifact:', artifact.name);
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
              }
            }
