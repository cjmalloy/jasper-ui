:host {
  --dim: 60px;
  --piece-size: 45px;

  aspect-ratio: 1 / 1;
  max-height: calc(100vh - 20px);
  display: grid !important;
  grid-template-columns: repeat(8, 1fr) !important;
  user-select: none;
  z-index: 1;

  @supports not (aspect-ratio: 1 / 1) {
    width: calc(8 * var(--dim));
    height: calc(8 * var(--dim));
    .tile {
      width: var(--dim);
      height: var(--dim);
    }
  }

  &.flip {
    transition: 1s ease-in-out transform;
    transform: rotate(180deg);
    .chess-piece {
      transition: 1s ease-in-out transform;
      transform: rotate(-180deg);
    }
  }

  .tile {
    aspect-ratio: 1 / 1;
    &.from {
      box-shadow: inset 3px 3px 16px rgba(255, 255, 255, 0.9),
                  inset -3px -3px 16px rgba(255, 255, 255, 0.9);
    }
    &.move {
      box-shadow: inset 3px 3px 16px rgba(0, 128, 0, 0.9),
                  inset -3px -3px 16px rgba(0, 128, 0, 0.9);
    }
    &.last-move {
      box-shadow: inset 3px 3px 16px color-mix(in srgb, var(--tag) 90%, transparent),
                  inset -3px -3px 16px color-mix(in srgb, var(--tag) 90%, transparent);
      &.move {
        box-shadow: inset 3px 3px 16px rgba(0, 128, 0, 0.9),
                    inset -3px -3px 16px rgba(0, 128, 0, 0.9);
        background: color-mix(in srgb, var(--tag) 40%, transparent) !important;
      }
    }
    &.light {
      background-color: rgba(255, 255, 255, 0.1);
    }
    &.dark {
      background-color: rgba(0, 0, 0, 0.4);
    }
  }

  .chess-piece {
    aspect-ratio: 1 / 1;
    max-height: 100%;
    overflow: hidden;
    line-height: var(--dim);
    font-size: var(--piece-size);

    &.translate {
      position: relative;
      z-index: 10;
      animation-duration: 1.5s;
      animation-name: translate;
      animation-iteration-count: 1;
      animation-timing-function: linear;
    }

    &.captured {
      position: relative;
      margin-top: -100%;
      animation-duration: 0.8s;
      animation-name: capture;
      animation-iteration-count: 1;
      animation-timing-function: ease-out;
      animation-delay: 1.0s;
      animation-fill-mode: backwards;
      pointer-events: none;
    }
  }
}

@keyframes translate {
  from {
    transform: translate(calc(var(--xFrom) * var(--dim)), calc(var(--yFrom) * var(--dim))) scale(100%);
  }

  50% {
    transform: translate(calc((var(--xFrom) + var(--xTo)) / 2 * var(--dim)), calc((var(--yFrom) + var(--yTo)) / 2 * var(--dim))) scale(200%);
  }

  to {
    transform: translate(calc(var(--xTo) * var(--dim)), calc(var(--yTo) * var(--dim))) scale(100%);
  }
}

@keyframes capture {
  0% {
    transform: scale(100%) translate(0, 0);
    opacity: 1;
  }

  50% {
    transform: scale(150%) translate(30px, -30px);
    opacity: 0.7;
  }

  100% {
    transform: scale(50%) translate(60px, -60px);
    opacity: 0;
  }
}
