import * as moment from 'moment';
import { Plugin } from '../model/plugin';

export const feedSchedulerPlugin: Plugin = {
  tag: '_plugin/scheduler/feed',
  name: $localize`‚è≤Ô∏èüóûÔ∏è Feed  Scheduler`,
  config: {
    mod: $localize`üóûÔ∏è RSS/Atom Feed`,
    default: true,
    generated: 'Generated by jasper-ui ' + moment().toISOString(),
    description: $localize`Schedule feed scraping.`,
    form: [{
      key: 'burst',
      type: 'boolean',
      props: {
        label: $localize`Burst`,
        title: $localize`Scrape all or oldest each interval`,
      }
    }]
  },
  schema: {
    properties: {
      burst: { type: 'boolean' },
    }
  }
};

export const feedPlugin: Plugin = {
  tag: '+plugin/feed',
  name: $localize`üóûÔ∏è RSS/Atom Feed`,
  config: {
    mod: $localize`üóûÔ∏è RSS/Atom Feed`,
    default: true,
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    submit: $localize`üóûÔ∏è feed`,
    settings: $localize`feed`,
    icons: [{ label: $localize`üóûÔ∏è`, order: 3 }],
    description: $localize`Import entries from an RSS / Atom feed. The feed will be scraped on an interval you specify.`,
    actions: [{ event: 'scrape', label: $localize`scrape` }],
    // language=Handlebars
    infoUi: `
      {{#if lastScrape}}
        last scraped {{fromNow lastScrape}}
      {{else}}
        not scraped yet
      {{/if}}
    `,
    form: [{
      key: 'addTags',
      type: 'tags',
    }],
    advancedForm: [{
      key: 'scrapeInterval',
      type: 'duration',
      defaultValue: 'PT15M',
    }, {
      key: 'disableEtag',
      type: 'boolean',
      props: {
        label: $localize`Disable Etag Caching:`
      }
    }, {
      key: 'stripQuery',
      type: 'boolean',
      props: {
        label: $localize`Strip Query:`
      }
    }, {
      key: 'scrapeWebpage',
      type: 'boolean',
      props: {
        label: $localize`Scrape Webpage:`
      }
    }, {
      key: 'scrapeDescription',
      type: 'boolean',
      defaultValue: true,
      props: {
        label: $localize`Scrape Description:`
      }
    }, {
      key: 'scrapeContents',
      type: 'boolean',
      defaultValue: true,
      props: {
        label: $localize`Scrape Contents:`,
        title: $localize`Will overwrite description if both scraped and found.`
      }
    }, {
      key: 'scrapeAuthors',
      type: 'boolean',
      defaultValue: true,
      props: {
        label: $localize`Scrape Authors:`
      }
    }, {
      key: 'scrapeThumbnail',
      type: 'boolean',
      defaultValue: true,
      props: {
        label: $localize`Scrape Thumbnail:`
      }
    }, {
      key: 'scrapeAudio',
      type: 'boolean',
      defaultValue: true,
      props: {
        label: $localize`Scrape Audio:`
      }
    }, {
      key: 'scrapeVideo',
      type: 'boolean',
      defaultValue: true,
      props: {
        label: $localize`Scrape Video:`
      }
    }, {
      key: 'scrapeEmbed',
      type: 'boolean',
      defaultValue: true,
      props: {
        label: $localize`Scrape Embed:`
      }
    }]
  },
  defaults: {
    scrapeInterval: 'PT15M',
  },
  schema: {
    properties: {
      scrapeInterval: { type: 'string' },
    },
    optionalProperties: {
      addTags: { elements: { type: 'string' } },
      lastScrape: { type: 'string' },
      disableEtag: { type: 'boolean' },
      etag: { type: 'string' },
      stripQuery: { type: 'boolean' },
      scrapeWebpage: { type: 'boolean' },
      scrapeDescription: { type: 'boolean' },
      scrapeContents: { type: 'boolean' },
      scrapeAuthors: { type: 'boolean' },
      scrapeThumbnail: { type: 'boolean' },
      scrapeAudio: { type: 'boolean' },
      scrapeVideo: { type: 'boolean' },
      scrapeEmbed: { type: 'boolean' },
    },
  },
};
