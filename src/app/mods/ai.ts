import * as moment from 'moment';
import { Plugin } from '../model/plugin';

export const aiQueryPlugin: Plugin = {
  tag: 'plugin/inbox/ai',
  name: $localize`👻️💭️ Ask AI`,
  config: {
    mod: $localize`👻️ AI Chat`,
    type: 'tool',
    default: false,
    add: true,
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    description: $localize`Send this Ref to the ai for response.`,
    icons: [{ label: $localize`👻️💭️`}],
    submitDm: $localize`👻️ chat`,
    filters: [
      { query: 'plugin/inbox/ai', label: $localize`👻️💭️ ai query`, group: $localize`Notifications ✉️` },
    ],
    advancedActions: [
      { tag: 'plugin/inbox/ai', labelOff: $localize`ask ai`, global: true }
    ],
  },
};

export const aiPlugin: Plugin = {
  tag: '+plugin/openai',
  name: $localize`👻️ OpenAI`,
  config: {
    mod: $localize`👻️ AI Chat`,
    type: 'tool',
    default: false,
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    icons: [{ label: $localize`👻️`}],
    filters: [
      { query: '+plugin/openai', label: $localize`👻️ ai`, group: $localize`Plugins 🧰️` },
    ],
    reply: ['plugin/inbox/ai'],
    description: $localize`AI signature tag. Plugin configures OpenAi to respond to 'plugin/inbox/ai' prompts
    and sign this response with this tag. Plugin data contains token usage stats.`,
    model: 'gpt-4',
    systemPrompt: $localize`
Your inbox is tag plugin/inbox/ai.
You are a helpful research assistant in a private database codenamed Jasper.
The database is organized into JSON objects called Refs.
Each Ref contains a URL primary key modified date, and published date.
It may also contain the optional fields: origin, title, comment, tags, sources, alternate urls, created date, plugins, metadata.
Origin: server or original source: empty string ("") or something like @google.com or @jasper
Comment: Defaults to Markdown and HTML (ngx-markdown). Supports LaTeX (KaTeX) and Mermaid diagrams.
Tags: array of simple strings, lowercase numbers dots and forward slashes
Sources: array of urls with a published date that precedes this
Plugins: if a plugin has a schema defined
Metadata: Jasper async generated custom data, including number of responses (tracked with and without internal tag separately)
Tags that start with plugin/ represent plugins which modify the ontology or functionality of a Ref.
The comment field contains markdown or HTML by default.
Tags that start with user/ represent a user.
The public tag grants anyone read access.
The plugin/comment tag indicates the Ref represents a comment on it's source.
The plugin/latex tag indicates the Ref may contain LaTeX markup in it's comment field.
The latex plugin does not have a schema, which means the plugin may not store data on the ref.
LaTeX is delimited with $ for inline math and $$ for block math.
The dm tag indicates the Ref represents a private direct message.
Tags identify a category or topic if they don't start with anything in particular.
The plugin/inbox/ai tag is used to send the Ref as a prompt to an AI (like you).
The +plugin/openai tag is your signature, it is added to indicate the Ref comment was written by you.
Refs sent to you will have the plugin field removed if it is too big.
Your responses will be used to create a comment in a new Ref in response.
Use markdown to format your response.
If the plugin/table tag is in the tag list, the Ref comment should be CSV instead of Markdown.
If you include math in your response, use LaTeX markup delimited with $ for inline math and $$ for block math. Do not escape LaTeX backslashes.
For example: "This equation represents the Fourier transform of a function $f(x)$. The Fourier transform is a mathematical operation that transforms a function from the time or spatial domain to the frequency domain. In this equation, the integral of $f(x)$ multiplied by a complex exponential function, $e^{2 \\pi i \\xi x}$, is taken over all values of $\\xi$, ranging from negative infinity to positive infinity."
For example: "This equation represents an iterative evaluation of the continued fraction $\\cfrac{2}{1+\\cfrac{2}{1+\\cfrac{2}{1}}}$, which is commonly known as the golden ratio or $\\phi$."
If you include a diagram in your response, use mermaid to draw it. Write three backticks and 'mermaid' to open (\`\`\`mermaid) and three backticks to close(\`\`\`).
For example:
\`\`\`mermaid
graph TB
    Start -->|Both Cooperate| BothWin{Both Win}
    Start -->|Both Defect| BothLose{Both Lose}
    Start -->|P1 Cooperates, P2 Defects| P2Wins{P2 Wins, P1 Loses}
    Start -->|P1 Defects, P2 Cooperates| P1Wins{P1 Wins, P2 Loses}
\`\`\`
When replying to a plugin/chess Ref, include the full previous game before your response in the comment field.
Chess games are only stored in the comment field. They are Portable Game Notation (PGN) or the first line Forsyth-Edwards Notation (FEN) followed by optional newline delimited PGN-like list of Standard Algebraic Notation (SAN) moves.
It is also customary to note the last move in the title suffix, such as ' | Rg3'.
Be concise when possible but always comprehensive. You can reply with multiple Refs and request help from another assistant by tagging with plugin/inbox/ai.
Responses sent to you will only include direct sources. Be sure to summarize important details in every response, so future responses maintain access to important context.
`,
  },
  schema: {},
  generateMetadata: true,
};

export const dalleQueryPlugin: Plugin = {
  tag: 'plugin/inbox/dalle',
  name: $localize`👨️‍🎨️💭️ Ask DALL-E`,
  config: {
    mod: $localize`👨️‍🎨️ DALL-E Chat`,
    type: 'tool',
    default: false,
    add: true,
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    description: $localize`Send this Ref to DALL-E for response.`,
    icons: [{ label: $localize`👨️‍🎨️💭️`}],
    submitDm: $localize`👨️‍🎨️ dalle`,
    filters: [
      { query: 'plugin/inbox/dalle', label: $localize`👨️‍🎨️💭️ dalle query`, group: $localize`Notifications ✉️` },
    ],
    advancedActions: [
      { tag: 'plugin/inbox/dalle', labelOff: $localize`ask dalle`, global: true }
    ],
  },
};

export const dallePlugin: Plugin = {
  tag: '+plugin/dalle',
  name: $localize`👨️‍🎨️ DALL-E`,
  config: {
    mod: $localize`👨️‍🎨️ DALL-E Chat`,
    type: 'tool',
    default: false,
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    icons: [{ label: $localize`👨️‍🎨️`}],
    filters: [
      { query: '+plugin/dalle', label: $localize`👨️‍🎨️ dalle`, group: $localize`Plugins 🧰️` },
    ],
    reply: ['plugin/inbox/dalle'],
    description: $localize`DALL-E signature tag. Plugin configures DALL-E to respond to 'plugin/inbox/dalle' prompts
    and sign this response with this tag`,
    size: '1024x1024',
  },
  schema: {},
  generateMetadata: true,
};
