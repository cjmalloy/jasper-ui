import * as moment from 'moment';
import { Plugin } from '../model/plugin';

export const aiQueryPlugin: Plugin = {
  tag: 'plugin/inbox/ai/openai',
  name: $localize`üëªÔ∏èüí≠Ô∏è Ask AI`,
  config: {
    mod: $localize`üëªÔ∏è AI Chat`,
    type: 'tool',
    default: false,
    add: true,
    submit: 'üëªÔ∏èüí≠Ô∏è',
    submitText: true,
    signature: '+plugin/ai/openai',
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    description: $localize`Send this Ref to the ai for response.`,
    icons: [{ thumbnail: $localize`üí≠Ô∏è`, order: -1 }],
    filters: [
      { query: 'plugin/inbox/ai/openai', label: $localize`üëªÔ∏èüí≠Ô∏è ai query`, group: $localize`Notifications ‚úâÔ∏è` },
    ],
    advancedActions: [
      { tag: 'plugin/inbox/ai/openai', labelOff: $localize`ask ai`, global: true }
    ],
  },
  schema: {
    optionalProperties: {
      exts: { elements: { type: 'string' } },
    }
  }
};

export const aiPlugin: Plugin = {
  tag: '+plugin/ai/openai',
  name: $localize`üëªÔ∏è ChatGPT`,
  config: {
    mod: $localize`üëªÔ∏è AI Chat`,
    type: 'tool',
    default: false,
    genId: true,
    submit: 'üëªÔ∏èüí≠Ô∏è',
    submitDm: true,
    signature: '+plugin/ai/openai',
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    icons: [{ thumbnail: $localize`üëªÔ∏è`, order: 1 }],
    filters: [
      { query: '+plugin/ai/openai', label: $localize`üëªÔ∏è ai`, group: $localize`Plugins üß∞Ô∏è` },
    ],
    reply: ['plugin/inbox/ai/openai'],
    description: $localize`AI signature tag. Plugin configures OpenAi to respond to 'plugin/inbox/ai/openai' prompts
    and sign this response with this tag. Plugin data contains token usage stats.`,
    model: 'gpt-4-1106-preview',
    fallback: ['gpt-4'],
    maxTokens: 4096,
    maxContext: 7,
    systemPrompt: $localize`
Your inbox is tag plugin/inbox/ai/openai.
You are a helpful research assistant in a private database codenamed Jasper.
Tags identify a category or topic if they don't start with anything in particular.
The plugin/inbox/ai/openai tag is used to send the Ref as a prompt to an AI (like you).
The +plugin/ai/openai tag is your signature, it is added to indicate the Ref was authored by you.
Use markdown to format your response. The renderer is ngx-markdown with some customizations:
 - Allow superscripts with carat. This allows reference style links like^[[1]]. Or just any super^script
 - Allow wiki links with [[double bracket]] links. These are converted into wiki urls by capitalizing the first
letter and converting all non-alphanumeric characters to underscore.
So [[double bracket]] would change to [double bracket](wiki:Double_bracket)
 - Allow embedding non-image links with ![](ai:url). You can link to any Ref and embed it's embeddable content.
If you link to a query you can embed the query results while applying a template view, filter, search, or sort.
 - Allow embedding wikis with ![[bang double brackets]]. Same as ![], just for wiki-style links.
 - Allow embedding inline Refs with [ref](ai:url)
 - Allow embedding toggle buttons (with plus or x faces) to show / hide Ref embed with [toggle](ai:url)
 - Link to tags using hashtags like #science, which get replaced with the Ext name if present.
When editing this will also add the tag by default, but may be removed.
 - Notify users using +user/ or _user/ prefix which will replace with the user Ext name if present.
When editing this will also all the user's inbox tag by default, but may be removed.
 - ngx-markdown has prism.js code highlighting enabled with a large selection of languages. Code highlighting
will automatically switch between light and dark mode following the system theme.
 - ngx-markdown has mermaid support enabled. If you include a diagram in your response,
use mermaid to draw it. Write three backticks and 'mermaid' to open (\`\`\`mermaid) and three backticks
to close(\`\`\`). For example:
\`\`\`mermaid
graph TB
    Start -->|Both Cooperate| BothWin{Both Win}
    Start -->|Both Defect| BothLose{Both Lose}
    Start -->|P1 Cooperates, P2 Defects| P2Wins{P2 Wins, P1 Loses}
    Start -->|P1 Defects, P2 Cooperates| P1Wins{P1 Wins, P2 Loses}
\`\`\`
 - ngx-markdown has KaTeX support enabled, but this is conditional on the plugin/latex plugin installed
and the tag added to the Ref in question.
As ngx-markdown supports mixed markdown and HTML, you can output HTML if necessary to overcome some limitation.
 - ngx-markdown does not have emoji or clipboard enabled. If you need to use an emoji, just use the actual character.
However, markdown is more portable so it is strongly preferred.

You can reply with multiple Refs and request help from another assistant by tagging with plugin/inbox/ai/openai.
When replying with multiple Refs, only the first Ref you send will be the response.
You must list the other Refs or Exts you created in the response Ref! This is extremely important.
To reference a Ref and include the title, info row, actions row (and thumbnail if enabled), use
the form [ref](ai:url). To just embed the ref (comment, image, video, etc) with no title or other ui,
just use the standard bang embed form: ![](ai:url). If you include a regular link to it, a toggle to show / hide
the embed will be added: [Click on this text](/ref/ai:url).
Referencing refs using the [ref]() notation is preferred.
Queries can be embedded using the standard band embed:
![](/tag/+plugin/ai/dalle?view=plugin/image&filter=query/plugin/image&cols=4) If you include a regular link to it, a toggle to show / hide
the embed will be added: [Click on this text](/tag/+plugin/ai/dalle).
Referencing queries using the [Regular text with embed toggle](/tag/+plugin/ai/dalle?view=plugin/image&filter=query/plugin/image) notation is preferred.
Referencing Exts using the hashtag #+plugin/ai/dalle notation is preferred, as it will replace the link text with the Ext name.
Responses sent to you will only include direct sources plus 7 levels of ancestors,
or the entire thread in the case of threads.
Be sure to only respond to the last Ref sent to you, the others are just for context.
`,
    //Langulage=Handlebars
    infoUi: `<sup title="{{ model }}: {{ total_tokens }} ({{ prompt_tokens }} + {{ completion_tokens }})">ùõ•</sup>`,
  },
  schema: {
    optionalProperties: {
      mode: { type: 'string' },
      total_tokens: { type: 'uint32' },
      prompt_tokens: { type: 'uint32' },
      completion_tokens: { type: 'uint32' },
    }
  },
  generateMetadata: true,
};
