import { DateTime } from 'luxon';
import { Plugin } from '../model/plugin';
import { findCache, findExtension, Ref } from '../model/ref';
import { Mod } from '../model/tag';
import { hasTag } from '../util/tag';

export const pdfPlugin: Plugin = {
  tag: 'plugin/pdf',
  name: $localize`üìÑÔ∏è PDF`,
  config: {
    mod: $localize`üìÑÔ∏è PDF`,
    type: 'plugin',
    default: true,
    proxy: true,
    add: true,
    embeddable: true,
    generated: $localize`Generated by jasper-ui ${DateTime.now().toISO()}`,
    aiInstructions: ` # plugin/pdf
    The pdf plugin indicates a Ref contains a pdf file. It contains optional
    field url which is typically missing. When the url field is missing it is
    assumed to be the URL of the Ref instead.
    You may refer to a pdf you returned with the URL ai:part, or optionally
    multiple returned assets as ai:part1, ai:part2, etc. These will be uploaded
    to the cache and the URL will be rewritten with it's cache URL. Even if you use
    the url field of an pdf plugin, anything not prefixed with ai:part will be
    assumed to refer to an existing URL in the system and not replaced.
    `,
    description: $localize`Adds an action button to open the PDF version.`,
    submit: $localize`üìÑÔ∏è pdf`,
    icons: [{ label: $localize`üìÑÔ∏è`, order: 2 }],
    filters: [
      { query: 'plugin/pdf', label: $localize`üìÑÔ∏è pdf`, title: $localize`PDFs`, group: $localize`Plugins üß∞Ô∏è` },
    ],
    actions: [{ label: $localize`pdf`, event: 'pdf' }],
    extensions: ['.pdf'],
    advancedForm: [{
      key: 'url',
      type: 'pdf',
    }, {
      key: 'showAbstract',
      type: 'boolean',
      props: {
        label: $localize`Show Abstract:`,
      },
    }],
  },
  defaults: {},
  schema: {
    optionalProperties: {
      url: { type: 'string' },
      showAbstract: { type: 'boolean' },
    },
  },
};


export function pdfUrl(plugin?: typeof pdfPlugin, ref?: Ref, repost?: Ref) {
  return ref?.plugins?.['plugin/pdf']?.url && { url: ref!.plugins?.['plugin/pdf'].url, origin: ref!.origin }
    || repost?.plugins?.['plugin/pdf']?.url && { url: repost!.plugins?.['plugin/pdf'].url, origin: repost!.origin }
    || findExtension('.pdf', ref, repost)
    || hasTag('plugin/pdf', ref) && findCache(ref, repost);
}

export const pdfResizePlugin: Plugin = {
  tag: 'plugin/pdf/resize',
  name: $localize`üìÑÔ∏è PDF Resize handle`,
  config: {
    mod: $localize`üìÑÔ∏è PDF`,
    description: $localize`Adds an action button to open the PDF version.`,
  }
}

export const pdfMod: Mod = {
  plugin: [
    pdfPlugin,
  ]
};
