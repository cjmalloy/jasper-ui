import { DateTime } from 'luxon';
import { Plugin } from '../../model/plugin';
import { Ref } from '../../model/ref';
import { Mod } from '../../model/tag';

export const translateQueryPlugin: Plugin = {
  tag: 'plugin/delta/ai/translate',
  name: 'üî°Ô∏èÔ∏èüí≠Ô∏è Translate',
  config: {
    mod: $localize`üî°Ô∏è Translate`,
    type: 'tool',
    default: false,
    add: true,
    signature: '+plugin/delta/ai/translate',
    generated: $localize`Generated by jasper-ui ${DateTime.now().toISO()}`,
    description: $localize`Send this Ref to the AI to translate.`,
    filters: [
      { query: 'plugin/delta/ai/translate', label: $localize`üî°Ô∏èÔ∏èüí≠Ô∏è translated`, title: $localize`Has AI generated translation`, group: $localize`Notifications ‚úâÔ∏è` },
    ],
    timeoutMs: 30_000,
    language: 'javascript',
    // language=JavaScript
    script: `
      const bundle = { ref: [] };
      const uuid = require('uuid');
      const axios = require('axios');
      const ref = JSON.parse(require('fs').readFileSync(0, 'utf-8'));
      const origin = ref.origin || '';
      const authors = ref.tags.filter(tag => tag === '+user' || tag === '_user' || tag.startsWith('+user/') || tag.startsWith('_user/'));
      const existingResponse = (await axios.get(process.env.JASPER_API + '/api/v1/ref/page', {
        headers: {
          'Local-Origin': origin || 'default',
          'User-Tag': authors[0] || '',
        },
        params: {
          query: '+plugin/placeholder:!+plugin/delta:' + authors.map(a => a.substring(1)).join(':'),
          responses: ref.url,
          size: 1,
        },
      })).data.content[0];
      if (existingResponse) process.exit(0);
      const response = {
        origin,
        url: 'ai:' + uuid.v4(),
        title: ref.title ? 'Translation of: ' + ref.title : 'Translation',
        comment: '+plugin/delta/ai/translate is working...',
        tags: ['+plugin/placeholder', 'plugin/llm'],
        plugins: {
          'plugin/llm': {
            ignoreThread: true,
            provider: 'gemini',
          }
        }
      };
      bundle.ref.push(response);
      response.tags.push(...authors.map(a => a.startsWith('+') || a.startsWith('_') ? a.substring(1) : a));
      if (ref.tags.includes('public')) response.tags.push('public');
      if (ref.tags.includes('internal')) response.tags.push('internal');
      if (ref.tags.includes('dm')) response.tags.push('dm', 'internal', 'plugin/thread');
      if (ref.tags.includes('plugin/comment')) response.tags.push('plugin/comment', 'internal');
      if (ref.tags.includes('plugin/thread')) response.tags.push('plugin/thread', 'internal');
      const chatTags = ref.tags.filter(t => t === 'chat' || t.startsWith('chat/'));
      if (chatTags.length) {
        response.tags.push(chatTags);
      }
      const uniq = (v, i, a) => a.indexOf(v) === i;
      response.tags = response.tags.filter(uniq);
      response.sources = [ref.url];
      if (ref.sources && (ref.tags.includes('plugin/thread') || ref.tags.includes('plugin/comment'))) {
        response.sources.push(ref.sources[1] || ref.sources[0] || ref.url);
      } else {
        response.sources.push(ref.url);
      }
      const locale = ref.plugins?.['plugin/delta/ai/translate']?.language || 'autodetect';
      if (['en', 'fr', 'jp', 'es', 'pt', 'de', 'it'].includes(locale)) {
        response.sources.push('system:translation-prompt-' + locale);
      } else {
        response.sources.push('system:translation-prompt');
      }
      console.log(JSON.stringify(bundle));
    `,
    form: [{
      key: 'language',
      type: 'select',
      defaultValue: 'autodetect',
      props: {
        label: $localize`Translate to:`,
        options: [
          { value: 'autodetect', label: $localize`Detect Automatically` },
          { value: 'en', label: $localize`English` },
          { value: 'fr', label: $localize`French` },
          { value: 'jp', label: $localize`Japanese` },
          { value: 'es', label: $localize`Spanish` },
          { value: 'pt', label: $localize`Portuguese` },
          { value: 'de', label: $localize`German` },
          { value: 'it', label: $localize`Italian` },
        ],
      },
    }],
  },
  defaults: {
    language: 'autodetect'
  },
  schema: {
    optionalProperties: {
      language: { type: 'string' },
    },
  },
};

export const translatePlugin: Plugin = {
  tag: '+plugin/delta/ai/translate',
  name: 'üî°Ô∏èÔ∏è Translation',
  config: {
    mod: $localize`üî°Ô∏è Translate`,
    type: 'tool',
    default: false,
    genId: true,
    submit: $localize`üî°Ô∏èüí≠Ô∏è`,
    submitDm: true,
    signature: '+plugin/delta/ai/translate',
    reply: ['plugin/delta/ai/translate'],
    generated: $localize`Generated by jasper-ui ${DateTime.now().toISO()}`,
    description: $localize`AI signature tag. Plugin configures AI to respond to 'plugin/delta/ai/translate' prompts
    and sign this response with this tag.`,
    icons: [{ thumbnail: $localize`üî°Ô∏èÔ∏è`, order: 1 }],
    filters: [
      { query: '+plugin/delta/ai/translate', label: $localize`üî°Ô∏èÔ∏è summary`, title: $localize`Translations generated by AI`, group: $localize`Delta Œî` },
    ],
    advancedActions: [
      { tag: '+plugin/delta/ai/translate', labelOn: $localize`redo`, title: $localize`Redo translation` },
      { tag: 'plugin/alias/plugin/delta/ai/translate', labelOff: $localize`redo`, title: $localize`Redo translation` },
    ]
  }
};

export const translatePrompt: Ref = {
  url: 'system:translation-prompt',
  title: $localize`Translation Prompt`,
  tags: ['public', 'internal', '+system/prompt'],
  comment: $localize`Translate the following into the language I'm currently using:`,
};

export const translatePromptEn: Ref = {
  url: 'system:translation-prompt-en',
  title: $localize`English Translation Prompt`,
  tags: ['public', 'internal', '+system/prompt'],
  comment: $localize`Translate the following into English:`,
};

export const translatePromptFr: Ref = {
  url: 'system:translation-prompt-fr',
  title: $localize`French Translation Prompt`,
  tags: ['public', 'internal', '+system/prompt'],
  comment: $localize`Translate the following into French:`,
};

export const translatePromptJp: Ref = {
  url: 'system:translation-prompt-jp',
  title: $localize`Japanese Translation Prompt`,
  tags: ['public', 'internal', '+system/prompt'],
  comment: $localize`Translate the following into Japanese:`,
};

export const translatePromptEs: Ref = {
  url: 'system:translation-prompt-es',
  title: $localize`Spanish Translation Prompt`,
  tags: ['public', 'internal', '+system/prompt'],
  comment: $localize`Translate the following into Spanish:`,
};

export const translatePromptPt: Ref = {
  url: 'system:translation-prompt-pt',
  title: $localize`Portuguese Translation Prompt`,
  tags: ['public', 'internal', '+system/prompt'],
  comment: $localize`Translate the following into Portuguese:`,
};

export const translatePromptDe: Ref = {
  url: 'system:translation-prompt-de',
  title: $localize`German Translation Prompt`,
  tags: ['public', 'internal', '+system/prompt'],
  comment: $localize`Translate the following into German:`,
};

export const translatePromptIt: Ref = {
  url: 'system:translation-prompt-it',
  title: $localize`Italian Translation Prompt`,
  tags: ['public', 'internal', '+system/prompt'],
  comment: $localize`Translate the following into Italian:`,
};

export const translateMod: Mod = {
  ref: [
    translatePrompt,
    translatePromptEn,
    translatePromptFr,
    translatePromptJp,
    translatePromptEs,
    translatePromptPt,
    translatePromptDe,
    translatePromptIt,
  ],
  plugin: [
    translateQueryPlugin,
    translatePlugin,
  ],
};
