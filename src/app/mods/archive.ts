import { DateTime } from 'luxon';
import { Plugin } from '../model/plugin';
import { Ref } from '../model/ref';
import { Mod } from '../model/tag';
import { getHost, getScheme } from '../util/http';

export const archivePlugin: Plugin = {
  tag: 'plugin/archive',
  name: $localize`üóÑÔ∏è Archive`,
  config: {
    type: 'plugin',
    default: true,
    add: true,
    generated: $localize`Generated by jasper-ui ${DateTime.now().toISO()}`,
    icons: [{ label: $localize`üóÑÔ∏è` }],
    filters: [
      { query: 'plugin/archive', label: $localize`üóÑÔ∏è archive`, title: $localize`Has archive link`, group: $localize`Plugins üß∞Ô∏è` },
    ],
    advancedActions: [
      { event: 'archive', label: $localize`archive`, global: true, scheme: 'http:' },
      { event: 'archive', label: $localize`archive`, global: true, scheme: 'https:' },
    ],
    hosts: [
      'archive.ph',
      '12ft.io',
    ],
    defaultArchive: 'https://archive.ph/newest/',
    // defaultArchive: 'https://12ft.io/?proxy=',
    advancedForm: [{
      key: 'url',
      type: 'url',
      props: {
        label: $localize`URL:`,
      },
    }],
  },
  defaults: {},
  schema: {
    optionalProperties: {
      url: { type: 'string' },
    },
  },
};

export function findArchive(plugin: typeof archivePlugin, ref?: Ref) {
  if (!ref) return '';
  if (ref.alternateUrls && plugin!.config?.hosts) {
    for (const s of ref.alternateUrls) {
      if (plugin!.config.hosts.includes(getHost(s)!)) return s;
    }
  }
  const scheme = getScheme(ref.url);
  if (scheme !== 'http:' && scheme !== 'https:') return '';
  return plugin!.config!.defaultArchive + ref.url;
}

export function archiveUrl(plugin: Plugin, ref?: Ref, repost?: Ref) {
  return ref?.plugins?.['plugin/archive']?.url
    || repost?.plugins?.['plugin/archive']?.url
    || findArchive(plugin, ref)
    || findArchive(plugin, repost);
}

export const archiveMod: Mod = {
  plugins: {
    archivePlugin,
  },
};
