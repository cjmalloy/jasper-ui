import { $localize } from '@angular/localize/init';
import * as moment from 'moment';
import { Plugin } from '../model/plugin';
import { Mod } from '../model/tag';

export const summaryQueryPlugin: Plugin = {
  tag: 'plugin/delta/summary',
  name: '‚úÇÔ∏èÔ∏èüí≠Ô∏è Summarize',
  config: {
    mod: $localize`‚úÇÔ∏è Summarize`,
    type: 'tool',
    default: false,
    add: true,
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    description: $localize`Send this Ref to the ai to create a summary response.`,
    icons: [{ label: $localize`‚úÇÔ∏èÔ∏èüí≠Ô∏è`, order: -3 }],
    filters: [
      { query: 'plugin/delta/summary', label: $localize`‚úÇÔ∏èÔ∏èüí≠Ô∏è summarized`, group: $localize`Notifications ‚úâÔ∏è` },
    ],
    advancedActions: [
      { tag: 'plugin/delta/summary', labelOff: $localize`summarize`, global: true }
    ],
    timeoutMs: 30_000,
    language: 'javascript',
    // language=JavaScript
    script: `
      const axios = require('axios');
      const OpenAi = require('openai');
      const ref = JSON.parse(require('fs').readFileSync(0, 'utf-8'));
      const origin = ref.origin || ''
      const config = ref.plugins['plugin/delta/summary'];
      const apiKey = (await axios.get(process.env.JASPER_API + '/api/v1/ref/page', {
        headers: {
          'Local-Origin': origin,
          'User-Role': 'ROLE_ADMIN',
        },
        params: { query: (config?.apiKeyTag || '+plugin/secret/openai') + origin },
      })).data.content[0].comment;
      const prompt = [
        'Title: ' + ref.title,
        'Tags: ' + ref.tags.join(', '),
        ref.comment
      ].join('\\n\\n');
      const openai = new OpenAi({ apiKey });
      const completion = await openai.chat.completions.create({
        model: config?.model || 'gpt-4o',
        max_tokens: config?.maxTokens || 4096,
        messages: [
          {role: 'system', content: 'Summarize the following:'},
          {role: 'user', content: prompt},
        ],
      });
      let tags = ['+plugin/delta/summary'];
      if (ref.tags.includes('public')) tags.push('public');
      if (ref.tags.includes('internal')) tags.push('internal');
      if (ref.tags.includes('dm')) tags.push('dm', 'internal', 'plugin/thread');
      if (ref.tags.includes('plugin/comment')) tags.push('plugin/comment', 'internal');
      if (ref.tags.includes('plugin/thread')) response.tags.push('plugin/thread', 'internal');
      const authors = ref.tags.filter(tag => tag === '+user' || tag === '_user' || tag.startsWith('+user/') || tag.startsWith('_user/'));
      const mailboxes = ref.tags.filter(tag => tag.startsWith('plugin/inbox') || tag.startsWith('plugin/outbox'));
      tags.push(...mailboxes, ...authors.map(tag => 'plugin/inbox/' + tag.substring(1)));
      tags = tags.filter((v, i, a) => a.indexOf(v) === i);
      const sources = [ref.url];
      if (tags.includes('plugin/thread') || tags.includes('plugin/comment')) {
        if (ref.sources?.length === 1) {
          sources.push(ref.sources[0]);
        } else if (ref.sources?.length > 1) {
          sources.push(ref.sources[1]);
        }
      }
      const summary = {
        url: 'comment:' + completion.id,
        sources,
        title: 'AI Summary: ' + ref.title,
        comment: completion.choices[0]?.message?.content,
        tags,
        plugins: { '+plugin/delta/summary': { ...config, usage: completion.usage } },
      };
      console.log(JSON.stringify({
        ref: [summary],
      }));
    `,
    advancedForm: [{
      key: 'provider',
      type: 'select',
      props: {
        label: $localize`Provider:`,
        options: [
          { value: 'openai', label: $localize`OpenAI` },
        ],
      },
    }, {
      key: 'apiKeyTag',
      type: 'tag',
      props: {
        label: $localize`üîëÔ∏è API Key Tag:`,
      },
    }, {
      key: 'model',
      type: 'string',
      props: {
        label: $localize`Model:`,
      },
    }, {
      key: 'maxTokens',
      type: 'number',
      props: {
        label: $localize`Max Tokens:`,
      },
    }],
  },
  defaults: {
    provider: 'openai',
    apiKeyTag: '+plugin/secret/openai',
    model: 'gpt-4o',
    maxTokens: 4096,
  },
  schema: {
    optionalProperties: {
      provider: { type: 'string' },
      apiKeyTag: { type: 'string' },
      model: { type: 'string' },
      maxTokens: { type: 'uint32' },
    }
  }
};

export const summaryPlugin: Plugin = {
  tag: '+plugin/delta/summary',
  name: '‚úÇÔ∏èÔ∏è OpenAI Summary',
  config: {
    mod: $localize`‚úÇÔ∏è Summarize`,
    type: 'tool',
    default: false,
    signature: '+plugin/delta/summary',
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    description: $localize`AI signature tag. Plugin configures OpenAi to respond to 'plugin/summary' prompts
    and sign this response with this tag. Plugin data contains token usage stats.`,
    icons: [{ thumbnail: $localize`‚úÇÔ∏èÔ∏è`, order: 1 }],
    filters: [
      { query: '+plugin/delta/summary', label: $localize`‚úÇÔ∏èÔ∏è summary`, group: $localize`Delta Œî` },
    ],
    // language=Handlebars
    infoUi: `{{#if model}}<span style="user-select:none;cursor:zoom-in" title="{{provider}} {{model}}: {{usage.total_tokens}} ({{usage.prompt_tokens}} + {{usage.completion_tokens}})">‚ÑπÔ∏è</span>{{/if}}`,
  },
  schema: {},
  generateMetadata: true,
};

export const summaryMod: Mod = {
  plugins: {
    summaryQueryPlugin,
    summaryPlugin,
  },
};
