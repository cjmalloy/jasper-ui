import { $localize } from '@angular/localize/init';
import * as moment from 'moment';
import { Plugin } from "../model/plugin";
import { Mod } from '../model/tag';
import { Template } from '../model/template';

export const chessPlugin: Plugin = {
  tag: 'plugin/chess',
  name: $localize`‚ôüÔ∏è Chess`,
  config: {
    mod: $localize`‚ôüÔ∏è Chess`,
    type: 'plugin',
    submitText: true,
    editingViewer: true,
    generated: 'Generated by jenkins-ui ' + moment().toISOString(),
    icons: [{ label: $localize`‚ôüÔ∏è`, order: 3 }],
    description: $localize`Activates built-in Chess game`,
    aiInstructions: ` # plugin/chess
    When replying to a plugin/chess Ref, include the full previous game before your response in the comment field.
    Chess games are only stored in the comment field. They are Portable Game Notation (PGN) or the first line Forsyth-Edwards Notation (FEN) followed by optional newline delimited PGN-like list of Standard Algebraic Notation (SAN) moves.
    It is also customary to note the last move in the title suffix, such as ' | Rg3'.`,
    filters: [
      { query: 'plugin/chess', label: $localize`‚ôüÔ∏è chess`, group: $localize`Games üïπÔ∏è` },
    ],
    actions: [
      { event: 'flip', label: $localize`flip` },
    ],
    advancedActions: [
      { tag: 'plugin/delta/chess', labelOff: $localize`play ai`, labelOn: $localize`cancel ai`, title: $localize`Play against an AI opponent.` },
    ],
    // language=CSS
    css: `
      body.dark-theme {
        .chess-board {
          border: 0.5px solid rgba(255, 255, 255, 0.2);
        }
        .chess-piece {
          opacity: 0.8;
          &.b {
            filter: drop-shadow(0 0 1px white) drop-shadow(1px 1px 2px black) !important;
          }
        }
      }

      body.light-theme {
        .chess-board {
          border: 0.5px solid transparent;
        }
        .chess-board {
          .tile {
            &.light {
              background: repeating-linear-gradient(-80deg, rgba(200, 140, 50, 0.9), rgba(210, 140, 50, 0.9), rgba(180, 130, 45, 0.9) 50%) !important;
            }

            &.dark {
              background: repeating-linear-gradient(40deg, rgba(120, 70, 30, 0.9), rgba(130, 70, 30, 0.9), rgba(100, 60, 20, 0.9) 20%) !important;
            }
          }
        }

        .chess-piece {
          &.w {
            color: #DC9 !important;
          }

          &.b {
            opacity: 0.90;
            color: #123 !important;
            filter: drop-shadow(0 0 1px white) drop-shadow(1px 1px 2px black) !important;
          }
        }
      }
    `,
  },
};

export const chessAiPlugin: Plugin = {
  tag: 'plugin/delta/chess',
  name: $localize`‚ôüÔ∏èüëªÔ∏è AI Chess`,
  config: {
    mod: $localize`‚ôüÔ∏è Chess`,
    type: 'plugin',
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    description: $localize`Play chess against the AI.`,
    icons: [{ label: $localize`üëªÔ∏è`, order: -3 }],
    timeoutMs: 30_000,
    language: 'javascript',
    // language=JavaScript
    script: `
      const axios = require('axios');
      const OpenAi = require('openai');
      const ref = JSON.parse(require('fs').readFileSync(0, 'utf-8'));
      const origin = ref.origin || ''
      const config = ref.plugins['plugin/delta/chess'];
      const moves = (ref.comment || '').split('\\n').filter(m => !!m.trim());
      const color = config?.aiColor.toLowerCase();
      if ((color === 'black') !== !!(moves.length % 2)) process.exit(0);
      const apiKey = (await axios.get(process.env.JASPER_API + '/api/v1/ref/page', {
        headers: {
          'Local-Origin': origin || 'default',
          'User-Role': 'ROLE_ADMIN',
        },
        params: { query: (config?.apiKeyTag || '+plugin/secret/openai') + origin },
      })).data.content[0].comment;
      const prompt =
        'You are playing a game of chess against an opponent.\\n' +
        'Read the following board in Portable Game Notation (PGN) and reply with the next move.\\n' +
        'If the game has ended or is not valid simply reply pass.\\n' +
        'Do not include any lists, formatting, additional text. Only reply with either a valid PGN move or the word pass in all lowercase.\\n\\n'
        + ref.comment;
      const openai = new OpenAi({ apiKey });
      const completion = await openai.chat.completions.create({
        model: config?.model || 'gpt-4o',
        max_tokens: config?.maxTokens || 4096,
        messages: [
          { role: 'system', content: prompt },
          { role: 'user', content: ref.comment || 'New game' },
        ],
      });
      const move = completion.choices[0]?.message?.content;
      const title = (ref.title.includes(' | ') ? ref.title.substring(0, ref.title.indexOf(' | ')) : ref.title) + ' | ' + move;
      delete ref.metadata;
      if (move !== 'pass') {
        const newBoard = {
          ...ref,
          title,
          comment: (ref.comment ? ref.comment + '\\n' : '') + move,
        };
        console.log(JSON.stringify({
          ref: [newBoard],
        }));
      }
    `,
    form: [{
      key: 'aiColor',
      type: 'select',
      defaultValue: 'Black',
      props: {
        label: $localize`AI Color:`,
        options: [
          { value: 'Black', label: $localize`Black` },
          { value: 'White', label: $localize`White` },
        ],
      }
    }],
  },
  defaults: {
    aiColor: 'Black',
  },
  schema: {
    properties: {
      aiColor: { type: 'string' },
    },
  },
};

export const chessTemplate: Template = {
  tag: 'plugin/chess',
  name: $localize`‚ôüÔ∏è Chess`,
  config: {
    mod: $localize`‚ôüÔ∏è Chess`,
    type: 'plugin',
    generated: 'Generated by jenkins-ui ' + moment().toISOString(),
    view: $localize`‚ôüÔ∏è`,
    // language=CSS
    css: `
      app-ref-list.plugin_chess {
        .list-container {
          grid-auto-flow: row dense;
          padding: 4px;
          gap: 8px;
          grid-template-columns:  minmax(0, 1fr);
          @media (min-width: 1000px) {
            grid-template-columns:  minmax(0, 1fr) minmax(0, 1fr);
          }
          @media (min-width: 1500px) {
            grid-template-columns: minmax(0, 1fr) minmax(0, 1fr) minmax(0, 1fr);
          }
          @media (min-width: 2000px) {
            grid-template-columns: minmax(0, 1fr) minmax(0, 1fr) minmax(0, 1fr) minmax(0, 1fr);
          }
          .list-number {
            display: none;
          }
          .ref {
            break-inside: avoid;
            .chess-board {
              max-height: unset;
            }
            .toggle {
              display: none;
            }
            @media (max-width: 740px) {
              .actions, .info {
                height: 28px;
              }
            }
          }
        }
      }
    `,
    advancedForm: [{
      key: 'defaultExpanded',
      type: 'boolean',
      defaultValue: true,
      props: {
        label: $localize`Default Expanded:`,
      },
    }],
  },
  defaults: {
    defaultExpanded: true,
    defaultSort: 'modified,DESC',
    defaultCols: 0, // Leave to CSS screen size detection, but show cols dropdown
  }
};

export const chessMod: Mod = {
  plugins: {
    chessPlugin,
    chessAiPlugin,
  },
  templates: {
    chessTemplate,
  },
};
