import * as moment from 'moment';
import { Plugin } from '../model/plugin';
import { Ref } from '../model/ref';
import { getHost, getScheme } from '../util/hosts';

export const archivePlugin: Plugin = {
  tag: 'plugin/archive',
  name: $localize`üóÑÔ∏è Archive`,
  config: {
    default: true,
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    icons: [{ label: $localize`üóÑÔ∏è`}],
    filters: [
      { query: 'plugin/archive', label: $localize`üóÑÔ∏è archive`, group: $localize`Plugins üß∞Ô∏è` },
    ],
    hosts: [
      'archive.ph',
      '12ft.io',
    ],
    defaultArchive: 'https://archive.ph/newest/',
    // defaultArchive: 'https://12ft.io/?proxy=',
    configForm: [{
      key: 'default',
      type: 'boolean',
      props: {
        label: $localize`Default:`,
      },
    }, {
      key: 'generated',
      type: 'string',
      props: {
        label: $localize`Generated:`,
      },
    }, {
      key: 'defaultArchive',
      type: 'string',
      props: {
        label: $localize`Default Archive:`,
      },
    }],
    advancedForm: [{
      key: 'url',
      type: 'url',
      props: {
        label: $localize`URL:`,
      },
    }],
  },
  defaults: {},
  schema: {
    optionalProperties: {
      url: { type: 'string' },
    },
  },
};

export function findArchive(plugin: Plugin, ref?: Ref) {
  if (!ref) return null;
  if (ref.alternateUrls && plugin!.config?.hosts) {
    for (const s of ref.alternateUrls) {
      if (plugin!.config.hosts.includes(getHost(s)!)) return s;
    }
  }
  const scheme = getScheme(ref.url);
  if (scheme !== 'http:' && scheme !== 'https:') return null;
  return plugin!.config!.defaultArchive + ref.url;
}
