import * as moment from 'moment';
import { Plugin } from '../model/plugin';

export const debugPlugin: Plugin = {
  tag: 'plugin/debug',
  name: $localize`üêûÔ∏è Debug`,
  config: {
    type: 'tool',
    add: true,
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    description: $localize`Debugging plugin will every feature turned on.`,
    settings: $localize`üêûÔ∏è debug`,
    extensions: ['.debug'],
    hosts: ['debug.local'],
    schemes: ['debug:'],
    published: $localize`debugging since`,
    css: `
        .tabs h5:after {
          content: ' üêûÔ∏è';
        }
    `,
    themes: {
      [$localize`Debug King`]: `
        .tabs h5:after {
          content: ' üëëÔ∏è' !important;
        }
      `,
    },
    icons: [
      { label: $localize`üêûÔ∏è` },
      { label: $localize`üî¥Ô∏è`, response: 'plugin/breakpoint', global: true },
    ],
    actions: [
      { response: 'plugin/breakpoint', labelOff: $localize`break`, labelOn: $localize`clear`, global: true },
    ],
    filters: [
      { query: 'plugin/debug', label: $localize`üêûÔ∏è debug`, group: $localize`Plugins üß∞Ô∏è` },
      { response: 'plugin/breakpoint', label: $localize`üî¥Ô∏è breakpoint`, group: $localize`Plugins üß∞Ô∏è` },
    ],
    form: [{
      key: 'show',
      type: 'boolean',
      props: {
        label: $localize`Show:`,
      },
    }, {
      key: 'input',
      type: 'string',
      props: {
        label: $localize`String:`,
      },
    }, {
      key: 'url',
      type: 'url',
      props: {
        label: $localize`URL:`,
      },
    }, {
      key: 'number',
      type: 'number',
      props: {
        label: $localize`Number:`,
      },
    }, {
      key: 'textarea',
      type: 'textarea',
      props: {
        label: $localize`Text Area:`,
      },
    }, {
      key: 'multicheckbox',
      type: 'multicheckbox',
      props: {
        label: $localize`Multi-Checkbox:`,
        options: [
          { value: 'a', label: 'Option A' },
          { value: 'b', label: 'Option B' },
          { value: 'c', label: 'Option C' },
          { value: 'd', label: 'Option D' },
        ],
      },
    }, {
      key: 'radio',
      type: 'radio',
      props: {
        label: $localize`Radio:`,
        options: [
          { value: 'red', label: 'Red' },
          { value: 'blue', label: 'Blue' },
          { value: 'green', label: 'Green' },
        ],
      },
    }, {
      key: 'select',
      type: 'select',
      props: {
        label: $localize`Select:`,
        options: [
          { value: '1', label: 'Option 1' },
          { value: '2', label: 'Option 2' },
          { value: '3', label: 'Option 3' },
          { value: '4', label: 'Option 4' },
        ],
      },
    }],
    advancedForm: [{
      key: 'advanced',
      type: 'string',
      props: {
        label: $localize`Advanced:`,
      },
    }],
    ui: `{{#if show}}
     Input: {{ input }} <br>
     Number: {{ number }} <br>
     Url: {{ url }} <br>
     Textarea: {{ textarea }} <br>
     Multi-Checkbox:
      A = {{ multicheckbox.a }}
      B = {{ multicheckbox.b }}
      C = {{ multicheckbox.c }}
      D = {{ multicheckbox.d }} <br>
     Radio: {{ radio }} <br>
     Select: {{ select }}
     Advanced: {{ advanced }}
     {{/if}}
    `,
  },
  defaults: {},
  schema: {
    optionalProperties: {
      show: { type: 'boolean' },
      input: { type: 'string' },
      number: { type: 'int32' },
      url: { type: 'string' },
      textarea: { type: 'string' },
      multicheckbox: {
        properties: {
          a: { type: 'boolean' },
          b: { type: 'boolean' },
          c: { type: 'boolean' },
          d: { type: 'boolean' },
        }
      },
      radio: { type: 'string' },
      select: { type: 'string' },
      advanced: { type: 'string' },
    },
  }
};

export const breakpointPlugin: Plugin = {
  tag: 'plugin/breakpoint',
  name: $localize`üî¥Ô∏è Breakpoint`,
  config: {
    type: 'tool',
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
  },
  generateMetadata: true,
  userUrl: true,
};
