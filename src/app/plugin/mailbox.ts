import * as _ from 'lodash-es';
import * as moment from 'moment';
import { Plugin } from '../model/plugin';
import { Ref } from '../model/ref';
import { authors } from '../util/format';
import { hasPrefix, localTag, prefix, tagOrigin } from '../util/tag';

export const inboxPlugin: Plugin = {
  tag: 'plugin/inbox',
  name: 'Inbox',
  config: {
    generated: 'Generated by jasper-ui ' + moment().toISOString(),
    description: 'The inbox plugin allow sending notifications to another user ' +
      'on the same server.',
  },
};

export const outboxPlugin: Plugin = {
  tag: 'plugin/outbox',
  name: 'Outbox',
  config: {
    generated: 'Generated by jasper-ui ' + moment().toISOString(),
    description: 'The outbox plugin allow sending notifications to another user ' +
      'on a remote or multi-tenant server.',
  },
};

export function mailboxes(ref: Ref, myUserTag: string): string[] {
  return _.uniq([
    ..._.filter(authors(ref), tag => tag !== myUserTag).map(getMailbox),
    ...notifications(ref).map(m => getLocalMailbox(m, ref.origin || '')),
  ]);
}

export function notifications(ref: Ref): string[] {
  return _.filter(ref.tags || [], isMailbox);
}

export function isMailbox(tag: string) {
  return hasPrefix(tag, 'plugin/inbox') ||
    hasPrefix(tag, 'plugin/outbox');
}

export function getLocalMailbox(mailbox: string, origin: string) {
  if (hasPrefix('plugin/outbox')) return mailbox;
  return mailbox.replace('plugin/inbox', `plugin/outbox/${origin.substring(1)}`)
}

export function getMailbox(userTag: string): string {
  const localUserTag = localTag(userTag);
  const origin = tagOrigin(userTag);
  if (origin) {
    return prefix(`plugin/outbox/${origin.substring(1)}/`, localUserTag);
  } else {
    return prefix('plugin/inbox/', localUserTag);
  }
}

export function newest(refs: Ref[]) {
  return _.maxBy(refs, r => r.modified!.valueOf());
}
