import * as moment from 'moment';
import { Plugin } from '../model/plugin';

export const geoPlugin: Plugin = {
  tag: 'plugin/geo',
  name: $localize`🌐️ Geo`,
  config: {
    type: 'viewer',
    default: true,
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    icons: [{ label: $localize`🗺️` }],
    filters: [
      { query: 'plugin/geo', label: $localize`🗺️ geo`, group: $localize`Geography 🌐️` },
    ],
    description: $localize`A GeoJSON Feature.`,
  },
};

export const geoPointPlugin: Plugin = {
  tag: 'plugin/geo/point',
  name: $localize`🌐️📍️ Geo Point`,
  config: {
    type: 'viewer',
    default: true,
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    icons: [{ label: $localize`📍️` }],
    filters: [
      { query: 'plugin/geo/point', label: $localize`📍️ point`, group: $localize`Geography 🌐️` },
    ],
    description: $localize`A GeoJSON Point.`,
    form: [{
      key: 'geometry.coordinates',
      type: 'location',
      props: {
        label: $localize`Location: `,
      },
    }],
  },
  defaults: {
    type: 'Feature',
    geometry: {
      type: 'Point',
      coordinates: [0, 0],
    }
  },
  schema: {
    optionalProperties: {
      bb: { elements: { type: 'int32' } } ,
    },
    properties: {
      type: { enum: ['Feature'] },
      geometry: {
        properties: {
          type: { enum: ['Point'] },
          coordinates: { elements: { type: 'int32' } },
        },
      }
    },
  },
};

export const geoLineStringPlugin: Plugin = {
  tag: 'plugin/geo/linestring',
  name: $localize`🌐️📌️📌️ Geo Line String`,
  config: {
    type: 'viewer',
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    icons: [{ label: $localize`📌️📌️` }],
    filters: [
      { query: 'plugin/geo/linestring', label: $localize`📌️📌️ line string`, group: $localize`Geography 🌐️` },
    ],
    description: $localize`A GeoJSON LineString.`,
  },
  defaults: {
    type: 'Feature',
    geometry: {
      type: 'LineString',
      coordinates: [],
    }
  },
  schema: {
    optionalProperties: {
      bb: { elements: { type: 'int32' } } ,
    },
    properties: {
      type: { enum: ['Feature'] },
      geometry: {
        properties: {
          type: { enum: ['LineString'] },
          coordinates: { elements: { elements: { type: 'int32' } } },
        },
      }
    },
  },
};

export const geoPolygonPlugin: Plugin = {
  tag: 'plugin/geo/polygon',
  name: $localize`🌐️🔷️ Geo Polygon`,
  config: {
    type: 'viewer',
    default: true,
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    icons: [{ label: $localize`🔷️` }],
    filters: [
      { query: 'plugin/geo/polygon', label: $localize`🔷️ polygon`, group: $localize`Geography 🌐️` },
    ],
    description: $localize`A GeoJSON Polygon.`,
  },
  defaults: {
    type: 'Feature',
    geometry: {
      type: 'Polygon',
      coordinates: [],
    }
  },
  schema: {
    optionalProperties: {
      bb: { elements: { type: 'int32' } } ,
    },
    properties: {
      type: { enum: ['Feature'] },
      geometry: {
        properties: {
          type: { enum: ['Polygon'] },
          coordinates: { elements: { elements: { elements: { type: 'int32' } } } },
        },
      }
    },
  },
};

export const geoMultiPointPlugin: Plugin = {
  tag: 'plugin/geo/multipoint',
  name: $localize`🌐️📍️📍️ Geo Multi Point`,
  config: {
    type: 'viewer',
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    icons: [{ label: $localize`📍️📍️` }],
    filters: [
      { query: 'plugin/geo/multipoint', label: $localize`📍️📍️ multi point`, group: $localize`Geography 🌐️` },
    ],
    description: $localize`A GeoJSON MultiPoint.`,
  },
  defaults: {
    type: 'Feature',
    geometry: {
      type: 'MultiPoint',
      coordinates: [[]],
    }
  },
  schema: {
    optionalProperties: {
      bb: { elements: { type: 'int32' } } ,
    },
    properties: {
      type: { enum: ['Feature'] },
      geometry: {
        properties: {
          type: { enum: ['MultiPoint'] },
          coordinates: { elements: { elements: { type: 'int32' } } },
        },
      }
    },
  },
};

export const geoMultiLineStringPlugin: Plugin = {
  tag: 'plugin/geo/multilinestring',
  name: $localize`🌐️📌️📌️📌️ Geo Multi Line String`,
  config: {
    type: 'viewer',
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    icons: [{ label: $localize`📌️📌️📌️` }],
    filters: [
      { query: 'plugin/geo/multilinestring', label: $localize`📌️📌️📌️ multi line string`, group: $localize`Geography 🌐️` },
    ],
    description: $localize`A GeoJSON MultiLineString.`,
  },
  defaults: {
    type: 'Feature',
    geometry: {
      type: 'MultiLineString',
      coordinates: [],
    }
  },
  schema: {
    optionalProperties: {
      bb: { elements: { type: 'int32' } } ,
    },
    properties: {
      type: { enum: ['Feature'] },
      geometry: {
        properties: {
          type: { enum: ['MultiLineString'] },
          coordinates: { elements: { elements: { elements: { type: 'int32' } } } },
        },
      }
    },
  },
};

export const geoMultiPolygonPlugin: Plugin = {
  tag: 'plugin/geo/multipolygon',
  name: $localize`🌐️🔷️🔷️ Geo Multi Polygon`,
  config: {
    type: 'viewer',
    generated: $localize`Generated by jasper-ui ${moment().toISOString()}`,
    icons: [{ label: $localize`🔷️🔷️` }],
    filters: [
      { query: 'plugin/geo/multipolygon', label: $localize`🔷️🔷️ multi polygon`, group: $localize`Geography 🌐️` },
    ],
    description: $localize`A GeoJSON MultiPolygon.`,
  },
  defaults: {
    type: 'Feature',
    geometry: {
      type: 'MultiPolygon',
      coordinates: [],
    }
  },
  schema: {
    optionalProperties: {
      bb: { elements: { type: 'int32' } } ,
    },
    properties: {
      type: { enum: ['Feature'] },
      geometry: {
        properties: {
          type: { enum: ['MultiPolygon'] },
          coordinates: { elements: { elements: { elements: { elements: { type: 'int32' } } } } },
        },
      }
    },
  },
};

